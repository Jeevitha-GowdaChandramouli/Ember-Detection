{"env_info": "sys.platform: linux\nPython: 3.8.12 (default, Oct 12 2021, 13:49:34) [GCC 7.5.0]\nCUDA available: True\nGPU 0,1,2: GeForce RTX 2080 Ti\nCUDA_HOME: None\nGCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0\nPyTorch: 1.10.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX512\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.2\nOpenCV: 4.5.5\nMMCV: 1.4.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.2\nMMDetection: 2.23.0+3e26931", "config": "model = dict(\n    type='FasterRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='caffe',\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint='open-mmlab://detectron2/resnet50_caffe')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'COCODataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(1333, 640), (1333, 672), (1333, 704), (1333, 736),\n                   (1333, 768), (1333, 800)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[103.53, 116.28, 123.675],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='data/0415_take3/annotations/ember_train_dataset.json',\n        img_prefix='data/0415_take3/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(1333, 640), (1333, 672), (1333, 704), (1333, 736),\n                           (1333, 768), (1333, 800)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('ember', )),\n    val=dict(\n        type='CocoDataset',\n        ann_file='data/0415_take3/annotations/ember_val_dataset.json',\n        img_prefix='data/0415_take3/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('ember', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file='data/0415_take3/annotations/ember_val_dataset.json',\n        img_prefix='data/0415_take3/val//',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('ember', )))\nevaluation = dict(interval=12, metric='bbox')\noptimizer = dict(type='SGD', lr=0.0025, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1, by_epoch=False)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'checkpoints/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nclasses = ('ember', )\nwork_dir = './exps/0415_take3'\ngpu_ids = [0]\nauto_resume = False\n", "seed": 62839987, "exp_name": "faster_rcnn_r50_caffe_fpn_mstrain_1x_ember.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00025, "memory": 2746, "data_time": 0.12726, "loss_rpn_cls": 0.33223, "loss_rpn_bbox": 0.04551, "loss_cls": 0.36569, "acc": 93.88477, "loss_bbox": 0.02655, "loss": 0.76999, "time": 1.84731}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0005, "memory": 2746, "data_time": 0.00522, "loss_rpn_cls": 0.03281, "loss_rpn_bbox": 0.01254, "loss_cls": 0.08105, "acc": 98.09961, "loss_bbox": 0.07518, "loss": 0.20158, "time": 1.68605}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00075, "memory": 2746, "data_time": 0.00633, "loss_rpn_cls": 0.00868, "loss_rpn_bbox": 0.01071, "loss_cls": 0.0476, "acc": 98.13086, "loss_bbox": 0.08758, "loss": 0.15458, "time": 1.77765}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.001, "memory": 2746, "data_time": 0.0058, "loss_rpn_cls": 0.01788, "loss_rpn_bbox": 0.00787, "loss_cls": 0.03993, "acc": 98.39453, "loss_bbox": 0.07516, "loss": 0.14084, "time": 1.78471}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00125, "memory": 2746, "data_time": 0.00564, "loss_rpn_cls": 0.0102, "loss_rpn_bbox": 0.00504, "loss_cls": 0.03997, "acc": 98.29492, "loss_bbox": 0.06973, "loss": 0.12493, "time": 1.66563}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.0015, "memory": 2746, "data_time": 0.0053, "loss_rpn_cls": 0.00175, "loss_rpn_bbox": 0.00467, "loss_cls": 0.04213, "acc": 98.34766, "loss_bbox": 0.08018, "loss": 0.12873, "time": 1.71979}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00182, "memory": 2746, "data_time": 0.0798, "loss_rpn_cls": 0.00953, "loss_rpn_bbox": 0.00417, "loss_cls": 0.03243, "acc": 98.73633, "loss_bbox": 0.0622, "loss": 0.10833, "time": 1.75531}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00207, "memory": 2746, "data_time": 0.00597, "loss_rpn_cls": 0.0019, "loss_rpn_bbox": 0.00493, "loss_cls": 0.03397, "acc": 98.56836, "loss_bbox": 0.07221, "loss": 0.11301, "time": 1.6913}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.00232, "memory": 2746, "data_time": 0.00545, "loss_rpn_cls": 0.00492, "loss_rpn_bbox": 0.00391, "loss_cls": 0.03016, "acc": 98.69141, "loss_bbox": 0.07321, "loss": 0.11221, "time": 1.58328}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.0025, "memory": 2746, "data_time": 0.00534, "loss_rpn_cls": 0.00443, "loss_rpn_bbox": 0.00632, "loss_cls": 0.03518, "acc": 98.46484, "loss_bbox": 0.07414, "loss": 0.12007, "time": 1.64374}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.0025, "memory": 2746, "data_time": 0.00519, "loss_rpn_cls": 0.00176, "loss_rpn_bbox": 0.00503, "loss_cls": 0.03817, "acc": 98.47266, "loss_bbox": 0.08452, "loss": 0.12948, "time": 1.63775}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.0025, "memory": 2746, "data_time": 0.00526, "loss_rpn_cls": 0.0019, "loss_rpn_bbox": 0.00509, "loss_cls": 0.02983, "acc": 98.76172, "loss_bbox": 0.07788, "loss": 0.11469, "time": 1.67805}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.0025, "memory": 2746, "data_time": 0.08961, "loss_rpn_cls": 0.00119, "loss_rpn_bbox": 0.00438, "loss_cls": 0.0385, "acc": 98.41211, "loss_bbox": 0.08345, "loss": 0.12752, "time": 1.70154}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.0025, "memory": 2746, "data_time": 0.00542, "loss_rpn_cls": 0.00333, "loss_rpn_bbox": 0.00434, "loss_cls": 0.03211, "acc": 98.67969, "loss_bbox": 0.07275, "loss": 0.11253, "time": 1.73648}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.0025, "memory": 2746, "data_time": 0.00536, "loss_rpn_cls": 0.00079, "loss_rpn_bbox": 0.00365, "loss_cls": 0.03226, "acc": 98.65234, "loss_bbox": 0.07031, "loss": 0.10701, "time": 2.09622}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.0025, "memory": 2746, "data_time": 0.00536, "loss_rpn_cls": 0.00789, "loss_rpn_bbox": 0.0046, "loss_cls": 0.02855, "acc": 98.79883, "loss_bbox": 0.06186, "loss": 0.10291, "time": 1.67733}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.0025, "memory": 2746, "data_time": 0.00538, "loss_rpn_cls": 0.00104, "loss_rpn_bbox": 0.0039, "loss_cls": 0.01946, "acc": 99.19922, "loss_bbox": 0.05074, "loss": 0.07514, "time": 1.74371}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.0025, "memory": 2746, "data_time": 0.00528, "loss_rpn_cls": 0.00041, "loss_rpn_bbox": 0.00267, "loss_cls": 0.02116, "acc": 99.13672, "loss_bbox": 0.05287, "loss": 0.07712, "time": 1.72017}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.0025, "memory": 2746, "data_time": 0.09197, "loss_rpn_cls": 0.00166, "loss_rpn_bbox": 0.00371, "loss_cls": 0.01784, "acc": 99.23047, "loss_bbox": 0.048, "loss": 0.0712, "time": 1.75192}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.0025, "memory": 2746, "data_time": 0.00524, "loss_rpn_cls": 0.0005, "loss_rpn_bbox": 0.0037, "loss_cls": 0.02127, "acc": 99.14062, "loss_bbox": 0.0531, "loss": 0.07857, "time": 1.62273}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.0025, "memory": 2746, "data_time": 0.00562, "loss_rpn_cls": 0.00032, "loss_rpn_bbox": 0.00238, "loss_cls": 0.02028, "acc": 99.18164, "loss_bbox": 0.05005, "loss": 0.07303, "time": 1.61316}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.0025, "memory": 2746, "data_time": 0.00548, "loss_rpn_cls": 0.0006, "loss_rpn_bbox": 0.00415, "loss_cls": 0.0252, "acc": 98.87891, "loss_bbox": 0.05928, "loss": 0.08923, "time": 1.67513}
{"mode": "train", "epoch": 4, "iter": 250, "lr": 0.0025, "memory": 2746, "data_time": 0.00553, "loss_rpn_cls": 0.0014, "loss_rpn_bbox": 0.00388, "loss_cls": 0.02625, "acc": 98.88086, "loss_bbox": 0.06206, "loss": 0.09359, "time": 1.52551}
{"mode": "train", "epoch": 4, "iter": 300, "lr": 0.0025, "memory": 2746, "data_time": 0.00543, "loss_rpn_cls": 0.00104, "loss_rpn_bbox": 0.00287, "loss_cls": 0.01984, "acc": 99.16406, "loss_bbox": 0.04902, "loss": 0.07277, "time": 1.60943}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.0025, "memory": 2746, "data_time": 0.05955, "loss_rpn_cls": 0.00035, "loss_rpn_bbox": 0.00304, "loss_cls": 0.02145, "acc": 99.11719, "loss_bbox": 0.05677, "loss": 0.08162, "time": 1.53633}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.0025, "memory": 2746, "data_time": 0.00607, "loss_rpn_cls": 0.00026, "loss_rpn_bbox": 0.00332, "loss_cls": 0.02201, "acc": 99.12305, "loss_bbox": 0.05771, "loss": 0.0833, "time": 1.48871}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 0.0025, "memory": 2746, "data_time": 0.00555, "loss_rpn_cls": 0.0011, "loss_rpn_bbox": 0.00301, "loss_cls": 0.01832, "acc": 99.39453, "loss_bbox": 0.04717, "loss": 0.0696, "time": 1.49234}
{"mode": "train", "epoch": 5, "iter": 200, "lr": 0.0025, "memory": 2746, "data_time": 0.00564, "loss_rpn_cls": 0.00056, "loss_rpn_bbox": 0.00294, "loss_cls": 0.02181, "acc": 99.1582, "loss_bbox": 0.05377, "loss": 0.07908, "time": 1.48924}
{"mode": "train", "epoch": 5, "iter": 250, "lr": 0.0025, "memory": 2746, "data_time": 0.00524, "loss_rpn_cls": 0.00082, "loss_rpn_bbox": 0.00286, "loss_cls": 0.02437, "acc": 98.99023, "loss_bbox": 0.05938, "loss": 0.08743, "time": 1.75393}
{"mode": "train", "epoch": 5, "iter": 300, "lr": 0.0025, "memory": 2746, "data_time": 0.00542, "loss_rpn_cls": 0.00017, "loss_rpn_bbox": 0.0033, "loss_cls": 0.021, "acc": 99.09375, "loss_bbox": 0.05378, "loss": 0.07825, "time": 1.51275}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.0025, "memory": 2746, "data_time": 0.08278, "loss_rpn_cls": 0.00059, "loss_rpn_bbox": 0.00283, "loss_cls": 0.01969, "acc": 99.1582, "loss_bbox": 0.05309, "loss": 0.07621, "time": 1.54033}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.0025, "memory": 2746, "data_time": 0.00585, "loss_rpn_cls": 0.00037, "loss_rpn_bbox": 0.00259, "loss_cls": 0.01699, "acc": 99.35742, "loss_bbox": 0.05062, "loss": 0.07057, "time": 1.59288}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 0.0025, "memory": 2746, "data_time": 0.0061, "loss_rpn_cls": 0.00021, "loss_rpn_bbox": 0.00242, "loss_cls": 0.0154, "acc": 99.38867, "loss_bbox": 0.04412, "loss": 0.06214, "time": 1.49527}
{"mode": "train", "epoch": 6, "iter": 200, "lr": 0.0025, "memory": 2746, "data_time": 0.00544, "loss_rpn_cls": 0.00037, "loss_rpn_bbox": 0.00336, "loss_cls": 0.01729, "acc": 99.28906, "loss_bbox": 0.05108, "loss": 0.0721, "time": 1.51855}
{"mode": "train", "epoch": 6, "iter": 250, "lr": 0.0025, "memory": 2746, "data_time": 0.00597, "loss_rpn_cls": 0.00069, "loss_rpn_bbox": 0.00299, "loss_cls": 0.01656, "acc": 99.33594, "loss_bbox": 0.04665, "loss": 0.06689, "time": 1.58166}
{"mode": "train", "epoch": 6, "iter": 300, "lr": 0.0025, "memory": 2746, "data_time": 0.0055, "loss_rpn_cls": 0.00023, "loss_rpn_bbox": 0.00205, "loss_cls": 0.01937, "acc": 99.25195, "loss_bbox": 0.05255, "loss": 0.07421, "time": 1.48242}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.0025, "memory": 2746, "data_time": 0.07183, "loss_rpn_cls": 0.00038, "loss_rpn_bbox": 0.00346, "loss_cls": 0.01972, "acc": 99.17969, "loss_bbox": 0.05873, "loss": 0.08229, "time": 1.58321}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.0025, "memory": 2746, "data_time": 0.00513, "loss_rpn_cls": 0.00029, "loss_rpn_bbox": 0.00244, "loss_cls": 0.01716, "acc": 99.30859, "loss_bbox": 0.04728, "loss": 0.06717, "time": 1.66737}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 0.0025, "memory": 2746, "data_time": 0.00563, "loss_rpn_cls": 0.00021, "loss_rpn_bbox": 0.00218, "loss_cls": 0.0163, "acc": 99.31641, "loss_bbox": 0.04977, "loss": 0.06846, "time": 1.85741}
{"mode": "train", "epoch": 7, "iter": 200, "lr": 0.0025, "memory": 2746, "data_time": 0.00542, "loss_rpn_cls": 0.00012, "loss_rpn_bbox": 0.0036, "loss_cls": 0.01962, "acc": 99.24414, "loss_bbox": 0.05491, "loss": 0.07824, "time": 1.592}
{"mode": "train", "epoch": 7, "iter": 250, "lr": 0.0025, "memory": 2746, "data_time": 0.00555, "loss_rpn_cls": 0.00153, "loss_rpn_bbox": 0.00252, "loss_cls": 0.01713, "acc": 99.36914, "loss_bbox": 0.04722, "loss": 0.0684, "time": 1.5494}
{"mode": "train", "epoch": 7, "iter": 300, "lr": 0.0025, "memory": 2746, "data_time": 0.00545, "loss_rpn_cls": 0.00057, "loss_rpn_bbox": 0.00242, "loss_cls": 0.01964, "acc": 99.18359, "loss_bbox": 0.05614, "loss": 0.07878, "time": 1.56723}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.0025, "memory": 2746, "data_time": 0.1132, "loss_rpn_cls": 0.00021, "loss_rpn_bbox": 0.00224, "loss_cls": 0.01594, "acc": 99.38477, "loss_bbox": 0.04381, "loss": 0.0622, "time": 1.66586}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.0025, "memory": 2746, "data_time": 0.0056, "loss_rpn_cls": 0.00056, "loss_rpn_bbox": 0.00243, "loss_cls": 0.01758, "acc": 99.27539, "loss_bbox": 0.04981, "loss": 0.07037, "time": 1.49667}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 0.0025, "memory": 2746, "data_time": 0.00539, "loss_rpn_cls": 0.00029, "loss_rpn_bbox": 0.00286, "loss_cls": 0.01372, "acc": 99.45312, "loss_bbox": 0.04103, "loss": 0.0579, "time": 1.57058}
{"mode": "train", "epoch": 8, "iter": 200, "lr": 0.0025, "memory": 2746, "data_time": 0.0055, "loss_rpn_cls": 0.00013, "loss_rpn_bbox": 0.00266, "loss_cls": 0.01359, "acc": 99.45312, "loss_bbox": 0.04276, "loss": 0.05914, "time": 1.50379}
{"mode": "train", "epoch": 8, "iter": 250, "lr": 0.0025, "memory": 2746, "data_time": 0.00552, "loss_rpn_cls": 0.00015, "loss_rpn_bbox": 0.00234, "loss_cls": 0.01372, "acc": 99.46289, "loss_bbox": 0.04275, "loss": 0.05896, "time": 1.53576}
{"mode": "train", "epoch": 8, "iter": 300, "lr": 0.0025, "memory": 2746, "data_time": 0.00579, "loss_rpn_cls": 0.00033, "loss_rpn_bbox": 0.00198, "loss_cls": 0.01462, "acc": 99.4043, "loss_bbox": 0.04574, "loss": 0.06267, "time": 1.56674}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.00025, "memory": 2746, "data_time": 0.05687, "loss_rpn_cls": 0.00017, "loss_rpn_bbox": 0.00248, "loss_cls": 0.01464, "acc": 99.36523, "loss_bbox": 0.03847, "loss": 0.05576, "time": 1.79757}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.00025, "memory": 2746, "data_time": 0.00601, "loss_rpn_cls": 5e-05, "loss_rpn_bbox": 0.00186, "loss_cls": 0.01122, "acc": 99.57227, "loss_bbox": 0.03283, "loss": 0.04596, "time": 1.72116}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 0.00025, "memory": 2746, "data_time": 0.00579, "loss_rpn_cls": 3e-05, "loss_rpn_bbox": 0.00186, "loss_cls": 0.01214, "acc": 99.50391, "loss_bbox": 0.03583, "loss": 0.04986, "time": 1.6113}
{"mode": "train", "epoch": 9, "iter": 200, "lr": 0.00025, "memory": 2746, "data_time": 0.00583, "loss_rpn_cls": 0.00024, "loss_rpn_bbox": 0.00178, "loss_cls": 0.01114, "acc": 99.55273, "loss_bbox": 0.03214, "loss": 0.0453, "time": 1.5085}
{"mode": "train", "epoch": 9, "iter": 250, "lr": 0.00025, "memory": 2746, "data_time": 0.00516, "loss_rpn_cls": 0.00011, "loss_rpn_bbox": 0.00153, "loss_cls": 0.01216, "acc": 99.54883, "loss_bbox": 0.03155, "loss": 0.04535, "time": 1.56589}
{"mode": "train", "epoch": 9, "iter": 300, "lr": 0.00025, "memory": 2746, "data_time": 0.00638, "loss_rpn_cls": 4e-05, "loss_rpn_bbox": 0.00162, "loss_cls": 0.01226, "acc": 99.49023, "loss_bbox": 0.03476, "loss": 0.04868, "time": 1.65629}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.00025, "memory": 2746, "data_time": 0.08351, "loss_rpn_cls": 9e-05, "loss_rpn_bbox": 0.00163, "loss_cls": 0.01175, "acc": 99.53516, "loss_bbox": 0.03142, "loss": 0.04489, "time": 1.69084}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.00025, "memory": 2746, "data_time": 0.00581, "loss_rpn_cls": 6e-05, "loss_rpn_bbox": 0.00136, "loss_cls": 0.01206, "acc": 99.51367, "loss_bbox": 0.03019, "loss": 0.04366, "time": 1.56561}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 0.00025, "memory": 2746, "data_time": 0.00588, "loss_rpn_cls": 6e-05, "loss_rpn_bbox": 0.00157, "loss_cls": 0.01148, "acc": 99.54883, "loss_bbox": 0.03287, "loss": 0.04598, "time": 1.53946}
{"mode": "train", "epoch": 10, "iter": 200, "lr": 0.00025, "memory": 2746, "data_time": 0.00532, "loss_rpn_cls": 9e-05, "loss_rpn_bbox": 0.00222, "loss_cls": 0.01115, "acc": 99.57031, "loss_bbox": 0.03097, "loss": 0.04443, "time": 1.58075}
{"mode": "train", "epoch": 10, "iter": 250, "lr": 0.00025, "memory": 2746, "data_time": 0.00527, "loss_rpn_cls": 0.00023, "loss_rpn_bbox": 0.00103, "loss_cls": 0.01169, "acc": 99.52539, "loss_bbox": 0.0318, "loss": 0.04476, "time": 1.75959}
{"mode": "train", "epoch": 10, "iter": 300, "lr": 0.00025, "memory": 2746, "data_time": 0.00533, "loss_rpn_cls": 0.00023, "loss_rpn_bbox": 0.00196, "loss_cls": 0.0133, "acc": 99.44141, "loss_bbox": 0.03288, "loss": 0.04837, "time": 1.5516}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.00025, "memory": 2746, "data_time": 0.12609, "loss_rpn_cls": 0.00014, "loss_rpn_bbox": 0.00137, "loss_cls": 0.0107, "acc": 99.5957, "loss_bbox": 0.02968, "loss": 0.04188, "time": 1.71122}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.00025, "memory": 2746, "data_time": 0.00557, "loss_rpn_cls": 6e-05, "loss_rpn_bbox": 0.00126, "loss_cls": 0.01042, "acc": 99.54883, "loss_bbox": 0.03089, "loss": 0.04263, "time": 1.47659}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 0.00025, "memory": 2746, "data_time": 0.00576, "loss_rpn_cls": 7e-05, "loss_rpn_bbox": 0.00163, "loss_cls": 0.011, "acc": 99.53711, "loss_bbox": 0.03231, "loss": 0.04501, "time": 1.54333}
{"mode": "train", "epoch": 11, "iter": 200, "lr": 0.00025, "memory": 2746, "data_time": 0.00663, "loss_rpn_cls": 6e-05, "loss_rpn_bbox": 0.00208, "loss_cls": 0.01297, "acc": 99.46289, "loss_bbox": 0.03311, "loss": 0.04822, "time": 1.51272}
{"mode": "train", "epoch": 11, "iter": 250, "lr": 0.00025, "memory": 2746, "data_time": 0.00597, "loss_rpn_cls": 6e-05, "loss_rpn_bbox": 0.00152, "loss_cls": 0.01081, "acc": 99.56836, "loss_bbox": 0.02886, "loss": 0.04125, "time": 1.60954}
{"mode": "train", "epoch": 11, "iter": 300, "lr": 0.00025, "memory": 2746, "data_time": 0.00588, "loss_rpn_cls": 4e-05, "loss_rpn_bbox": 0.00111, "loss_cls": 0.01068, "acc": 99.5625, "loss_bbox": 0.03126, "loss": 0.04309, "time": 1.49345}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 3e-05, "memory": 2746, "data_time": 0.07781, "loss_rpn_cls": 0.00026, "loss_rpn_bbox": 0.00136, "loss_cls": 0.01022, "acc": 99.59766, "loss_bbox": 0.03034, "loss": 0.04219, "time": 1.51509}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 3e-05, "memory": 2746, "data_time": 0.00554, "loss_rpn_cls": 0.0001, "loss_rpn_bbox": 0.00165, "loss_cls": 0.01097, "acc": 99.55664, "loss_bbox": 0.0295, "loss": 0.04221, "time": 1.44404}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 3e-05, "memory": 2746, "data_time": 0.00571, "loss_rpn_cls": 7e-05, "loss_rpn_bbox": 0.00097, "loss_cls": 0.00983, "acc": 99.64258, "loss_bbox": 0.02873, "loss": 0.0396, "time": 1.67047}
{"mode": "train", "epoch": 12, "iter": 200, "lr": 3e-05, "memory": 2746, "data_time": 0.00616, "loss_rpn_cls": 5e-05, "loss_rpn_bbox": 0.00177, "loss_cls": 0.0116, "acc": 99.56445, "loss_bbox": 0.0327, "loss": 0.04611, "time": 1.52694}
{"mode": "train", "epoch": 12, "iter": 250, "lr": 3e-05, "memory": 2746, "data_time": 0.00596, "loss_rpn_cls": 5e-05, "loss_rpn_bbox": 0.00137, "loss_cls": 0.01095, "acc": 99.56641, "loss_bbox": 0.03043, "loss": 0.0428, "time": 1.45108}
{"mode": "train", "epoch": 12, "iter": 300, "lr": 3e-05, "memory": 2746, "data_time": 0.00538, "loss_rpn_cls": 4e-05, "loss_rpn_bbox": 0.0016, "loss_cls": 0.01065, "acc": 99.58203, "loss_bbox": 0.02734, "loss": 0.03963, "time": 1.44177}
{"mode": "val", "epoch": 12, "iter": 250, "lr": 3e-05, "bbox_mAP": 0.762, "bbox_mAP_50": 0.958, "bbox_mAP_75": 0.872, "bbox_mAP_s": 0.003, "bbox_mAP_m": 0.565, "bbox_mAP_l": 0.827, "bbox_mAP_copypaste": "0.762 0.958 0.872 0.003 0.565 0.827"}
